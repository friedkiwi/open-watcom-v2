# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables: 
  System.Debug: true

schedules:
- cron: "0 1 * * *"
  displayName: Daily build
  branches:
    include:
    - master

trigger:
- master

stages:
  - stage: boot
    displayName: "Bootstrap"
    jobs:
      - job: Bootstrap
        strategy:
          matrix:
            Linux:
              owobjdir: binlnx
              owimage: 'ubuntu-latest'
              owtools: GCC
              owscript: buildx.sh
            Windows:
              owobjdir: binnt
              owimage: 'vs2017-win2016'
              owtools: VISUALC
              owscript: buildx.cmd
            OSX:
              owobjdir: binosx
              owimage: 'macOS-latest'
              owtools: CLANG
              owscript: buildx.sh
        pool:
          vmImage: $(owimage)
        steps:
        - script: azure/$(owscript)
          displayName: "Bootstrap"
          env:
            OWAZURE_STAGE_NAME: boot
            OWOBJDIR: $(owobjdir)
            OWTOOLS: $(owtools)
        - template: azure/artifsav.yml
          parameters:
            owobjdir: $(owobjdir)
  - stage: build
    displayName: "Build"
    dependsOn: boot
    jobs:
      - job: Build
        strategy:
          matrix:
            Linux:
              owobjdir: binlnx
              owimage: 'ubuntu-latest'
              owtools: GCC
              owscript: buildx.sh
            Windows:
              owobjdir: binnt
              owimage: 'vs2017-win2016'
              owtools: VISUALC
              owscript: buildx.cmd
            OSX:
              owobjdir: binosx
              owimage: 'macOS-latest'
              owtools: CLANG
              owscript: buildx.sh
        pool:
          vmImage: $(owimage)
        timeoutInMinutes: 120
        steps:
        - template: azure/artiflod.yml
          parameters:
            owobjdir: $(owobjdir)
        - script: sudo apt-get install -y dosbox
          displayName: "Install DOSBOX"
          condition: eq( variables['Agent.OS'], 'Linux' )
        - script: brew install dosbox
          displayName: "Install DOSBOX"
          condition: eq( variables['Agent.OS'], 'Darwin' )
        - script: azure/$(owscript)
          displayName: "Build"
          env: 
            OWAZURE_STAGE_NAME: build
            OWOBJDIR: $(owobjdir)
            OWTOOLS: $(owtools)
        - template: azure/relsave.yml
          parameters:
            owobjdir: $(owobjdir)
        - template: azure/instsave.yml
          parameters:
            owobjdir: $(owobjdir)
  - stage: tests
    displayName: "Tests"
    dependsOn: build
    jobs:
      - job: Linux
        variables:
        - template: azure/var-lnx.yml
        pool:
          vmImage: ${{ variables.owimage }}
        steps:
        - template: azure/artiflod.yml
          parameters:
            owobjdir: ${{ variables.owobjdir }}
      - job: Windows
        variables:
        - template: azure/var-win.yml
        pool:
          vmImage: ${{ variables.owimage }}
        steps:
        - template: azure/artiflod.yml
          parameters:
            owobjdir: ${{ variables.owobjdir }}
  - stage: docs
    displayName: "Documentation Build"
    dependsOn: boot
    jobs:
      - job: Documentation
        strategy:
          matrix:
            DOS:
              target: dos
            Html:
              target: htmlhelp
            NT:
              target: nt
            OS2:
              target: os2
            PDF:
              target: pdf
            WIN:
              target: win
        variables:
        - template: azure/var-win.yml
        pool:
          vmImage: ${{ variables.owimage }}
        steps:
        - template: azure/artiflod.yml
          parameters:
            owobjdir: ${{ variables.owobjdir }}
        - script: azure/buildx.cmd
          displayName: "Documentation Build"
          env:
            OWAZURE_STAGE_NAME: docs
            OWDOCTARGET: $(target)
            OWOBJDIR: ${{ variables.owobjdir }}
            OWTOOLS: VISUALC
        - template: azure/relsave.yml
          parameters: {owobjdir: doc$(target)}
  - stage: update
    displayName: "Consolidate Build"
    dependsOn: 
      - docs
      - tests
    jobs:
      - job: Linux
        variables:
        - template: azure/var-lnx.yml
        pool:
          vmImage: ${{ variables.owimage }}
        steps:
        # consolidate binaries
        - template: azure/relload.yml
          parameters: {owobjdir: binlnx}
        - template: azure/relload.yml
          parameters: {owobjdir: binnt}
        # consolidate documentation
        - template: azure/relload.yml
          parameters: {owobjdir: docdos}
        - template: azure/relload.yml
          parameters: {owobjdir: dochtmlhelp}
        - template: azure/relload.yml
          parameters: {owobjdir: docnt}
        - template: azure/relload.yml
          parameters: {owobjdir: docos2}
        - template: azure/relload.yml
          parameters: {owobjdir: docpdf}
        - template: azure/relload.yml
          parameters: {owobjdir: docwin}
        # complete OW release artifact
        - template: azure/relsave.yml
          parameters: {owobjdir: binall}
  - stage: instal
    displayName: "Build Installers"
    dependsOn: update
    jobs:
      - job: installer
        strategy:
          matrix:
            Linux:
              owobjdir: binlnx
              owimage: 'ubuntu-latest'
              owtools: GCC
              owscript: buildx.sh
            Windows:
              owobjdir: binnt
              owimage: 'vs2017-win2016'
              owtools: VISUALC
              owscript: buildx.cmd
        pool:
          vmImage: $(owimage)
        steps:
        - template: azure/artiflod.yml
          parameters:
            owobjdir: $(owobjdir)
        - template: azure/instload.yml
          parameters: 
            owobjdir: binlnx
        - template: azure/instload.yml
          parameters: 
            owobjdir: binnt
        - template: azure/relload.yml
          parameters:
            owobjdir: binall
        - script: azure/$(owscript)
          displayName: "Build Installers"
          env:
            OWAZURE_STAGE_NAME: inst
            OWOBJDIR: $(owobjdir)
            OWTOOLS: $(owtools)
        - template: azure/distsave.yml
          parameters:
            owobjdir: $(owobjdir)
  - stage: release
    displayName: "Make Release on GitHub"
    jobs:
      - job: Linux
        variables:
        - template: azure/var-lnx.yml
        pool:
          vmImage: ${{ variables.owimage }}
        steps:
        - template: azure/artiflod.yml
          parameters:
            owobjdir: ${{ variables.owobjdir }}
        - template: azure/distload.yml
          parameters: 
            owobjdir: binlnx
        - template: azure/distload.yml
          parameters: 
            owobjdir: binnt
        - template: azure/distsave.yml
          parameters: 
            owobjdir: binall
#        - task: GitHubRelease@0
#          inputs:
#            gitHubConnection: 
#            repositoryName: '$(Build.Repository.Name)' 
#            action: 'create' # Options: create, edit, delete
#            target: 'Current-build' # Required when action == Create || Action == Edit
#            tagSource: 'auto' # Required when action == Create# Options: auto, manual
#            #tagPattern: # Optional
#            #tag: # Required when action == Edit || Action == Delete || TagSource == Manual
#            #title: # Optional
#            #releaseNotesSource: 'file' # Optional. Options: file, input
#            #releaseNotesFile: # Optional
#            #releaseNotes: # Optional
#            assets: 'distrib/ow/bin/*' # Optional
#            assetUploadMode: 'replace' # Optional. Options: delete, replace
#            isDraft: false # Optional
#            isPreRelease: true # Optional
#            #addChangeLog: true # Optional
#            #compareWith: 'lastFullRelease' # Required when addChangeLog == True. Options: lastFullRelease, lastRelease, lastReleaseByTag
#            #releaseTag: # Required when compareWith == LastReleaseByTag
