# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables: {System.Debug: true, owdebug: 1}

trigger:
- master

stages:
  - stage: boot
    displayName: "Bootstrap"
    jobs:
      - job: Linux
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          owobjdir: binlnx
        steps:
        - bash: azure/buildx.sh
          displayName: "Bootstrap"
          env: {OWAZURE_STAGE_NAME: boot, OWOBJDIR: $(owobjdir), OWTOOLS: GCC, OWDEBUG: $(owdebug)}
        - task: PublishPipelineArtifact@1
          displayName: "Save Artifact $(owobjdir)"
          inputs: {artifactName: $(owobjdir), targetPath: build/$(owobjdir)}
        - task: PublishPipelineArtifact@1
          displayName: "Save Artifact watcom-$(owobjdir)"
          inputs: {artifactName: watcom-$(owobjdir), targetPath: bld/watcom/$(owobjdir)}
      - job: Windows
        pool:
          vmImage: 'vs2017-win2016'
        variables:
          owobjdir: binnt
        steps:
        - task: BatchScript@1
          inputs: {filename: azure\buildx.cmd}
#        - script: azure\buildx.cmd
          displayName: "Bootstrap"
          env: {OWAZURE_STAGE_NAME: boot, OWOBJDIR: $(owobjdir), OWTOOLS: VISUALC, OWDEBUG: $(owdebug)}
        - task: PublishPipelineArtifact@1
          displayName: "Save Artifact $(owobjdir)"
          inputs: {artifactName: $(owobjdir), targetPath: build/$(owobjdir)}
        - task: PublishPipelineArtifact@1
          displayName: "Save Artifact watcom-$(owobjdir)"
          inputs: {artifactName: watcom-$(owobjdir), targetPath: bld/watcom/$(owobjdir)}
      - job: OSX
        pool:
          vmImage: 'macOS-latest'
        variables:
          owobjdir: binosx
        steps:
        - bash: azure/buildx.sh
          displayName: "Bootstrap"
          env: {OWAZURE_STAGE_NAME: boot, OWOBJDIR: $(owobjdir), OWTOOLS: CLANG, OWDEBUG: $(owdebug)}
        - task: PublishPipelineArtifact@1
          displayName: "Save Artifact $(owobjdir)"
          inputs: {artifactName: $(owobjdir), targetPath: build/$(owobjdir)}
        - task: PublishPipelineArtifact@1
          displayName: "Save Artifact watcom-$(owobjdir)"
          inputs: {artifactName: watcom-$(owobjdir), targetPath: bld/watcom/$(owobjdir)}
  - stage: build
    displayName: "Build"
    jobs:
      - job: Linux
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          owobjdir: binlnx
        steps:
        - task: DownloadPipelineArtifact@2
          displayName: "Load Artifact $(owobjdir)"
          inputs: {buildType: 'current', artifactName: $(owobjdir), targetPath: build/$(owobjdir)}
        - bash: chmod +x build/$(owobjdir)/*
        - task: DownloadPipelineArtifact@2
          displayName: "Load Artifact watcom-$(owobjdir)"
          inputs: {buildType: 'current', artifactName: watcom-$(owobjdir), targetPath: bld/watcom/$(owobjdir)}
        - bash: azure/buildx.sh
          displayName: "Build"
          env: {OWAZURE_STAGE_NAME: build, OWOBJDIR: $(owobjdir), OWTOOLS: GCC, OWDEBUG: $(owdebug)}
      - job: Windows
        timeoutInMinutes: 120
        pool:
          vmImage: 'vs2017-win2016'
        variables:
          owobjdir: binnt
        steps:
        - task: DownloadPipelineArtifact@2
          displayName: "Load Artifact $(owobjdir)"
          inputs: {buildType: 'current', artifactName: $(owobjdir), targetPath: build/$(owobjdir)}
        - bash: chmod +x build/$(owobjdir)/*
        - task: DownloadPipelineArtifact@2
          displayName: "Load Artifact watcom-$(owobjdir)"
          inputs: {buildType: 'current', artifactName: watcom-$(owobjdir), targetPath: bld/watcom/$(owobjdir)}
        - script: azure\buildx.cmd
          displayName: "Build"
          env: {OWAZURE_STAGE_NAME: build, OWOBJDIR: $(owobjdir), OWTOOLS: VISUALC, OWDEBUG: $(owdebug)}
      - job: OSX
        timeoutInMinutes: 120
        pool:
          vmImage: 'macOS-latest'
        variables:
          owobjdir: binosx
        steps:
        - task: DownloadPipelineArtifact@2
          displayName: "Load Artifact $(owobjdir)"
          inputs: {buildType: 'current', artifactName: $(owobjdir), targetPath: build/$(owobjdir)}
        - bash: chmod +x build/$(owobjdir)/*
        - task: DownloadPipelineArtifact@2
          displayName: "Load Artifact watcom-$(owobjdir)"
          inputs: {buildType: 'current', artifactName: watcom-$(owobjdir), targetPath: bld/watcom/$(owobjdir)}
        - bash: azure/buildx.sh
          displayName: "Build"
          env: {OWAZURE_STAGE_NAME: build, OWOBJDIR: $(owobjdir), OWTOOLS: CLANG, OWDEBUG: $(owdebug)}
  - stage: update
    displayName: "Update Build"
    jobs:
      - job: Linux
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          owobjdir: binlnx
        steps:
        - task: DownloadPipelineArtifact@2
          displayName: "Load Artifact $(owobjdir)"
          inputs: {buildType: 'current', artifactName: $(owobjdir), targetPath: build/$(owobjdir)}
        - bash: chmod +x build/$(owobjdir)/*
        - task: DownloadPipelineArtifact@2
          displayName: "Load Artifact watcom-$(owobjdir)"
          inputs: {buildType: 'current', artifactName: watcom-$(owobjdir), targetPath: bld/watcom/$(owobjdir)}
      - job: Windows
        pool:
          vmImage: 'vs2017-win2016'
        variables:
          owobjdir: binnt
        steps:
        - task: DownloadPipelineArtifact@2
          displayName: "Load Artifact $(owobjdir)"
          inputs: {buildType: 'current', artifactName: $(owobjdir), targetPath: build/$(owobjdir)}
        - bash: chmod +x build/$(owobjdir)/*
        - task: DownloadPipelineArtifact@2
          displayName: "Load Artifact watcom-$(owobjdir)"
          inputs: {buildType: 'current', artifactName: watcom-$(owobjdir), targetPath: bld/watcom/$(owobjdir)}
  - stage: tests
    displayName: "Tests"
    jobs:
      - job: Linux
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          owobjdir: binlnx
      - job: Windows
        pool:
          vmImage: 'vs2017-win2016'
        variables:
          owobjdir: binnt
  - stage: docs
    displayName: "Documentation Build"
    jobs:
      - job: Windows
        timeoutInMinutes: 120
        pool:
          vmImage: 'vs2017-win2016'
        variables:
          owobjdir: binnt
        steps:
        - script: azure/buildx.cmd
          displayName: "Documentation Build"
          env: {OWAZURE_STAGE_NAME: docs, OWOBJDIR: $(owobjdir), OWTOOLS: VISUALC, OWDEBUG: $(owdebug)}
  - stage: instal
    displayName: "Build Installers"
    jobs:
      - job: Linux
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          owobjdir: binlnx
        steps:
        - task: DownloadPipelineArtifact@2
          displayName: "Load Artifact $(owobjdir)"
          inputs: {buildType: 'current', artifactName: $(owobjdir), targetPath: build/$(owobjdir)}
        - bash: chmod +x build/$(owobjdir)/*
        - task: DownloadPipelineArtifact@2
          displayName: "Load Artifact watcom-$(owobjdir)"
          inputs: {buildType: 'current', artifactName: watcom-$(owobjdir), targetPath: bld/watcom/$(owobjdir)}
        - script: azure\buildx.sh
          displayName: "Build Installers"
          env: {OWAZURE_STAGE_NAME: inst, OWOBJDIR: $(owobjdir), OWTOOLS: VISUALC, OWDEBUG: $(owdebug)}
      - job: Windows
        pool:
          vmImage: 'vs2017-win2016'
        variables:
          owobjdir: binnt
        steps:
        - task: DownloadPipelineArtifact@2
          displayName: "Load Artifact $(owobjdir)"
          inputs: {buildType: 'current', artifactName: $(owobjdir), targetPath: build/$(owobjdir)}
        - bash: chmod +x build/$(owobjdir)/*
        - task: DownloadPipelineArtifact@2
          displayName: "Load Artifact watcom-$(owobjdir)"
          inputs: {buildType: 'current', artifactName: watcom-$(owobjdir), targetPath: bld/watcom/$(owobjdir)}
        - script: azure\buildx.cmd
          displayName: "Build Installers"
          env: {OWAZURE_STAGE_NAME: inst, OWOBJDIR: $(owobjdir), OWTOOLS: VISUALC, OWDEBUG: $(owdebug)}
  - stage: release
    displayName: "Make Release on GitHub"
    jobs:
      - job: Linux
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          owobjdir: binlnx
