# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables: {System.Debug: true, owdebug: 1}

schedules:
- cron: "0 1 * * *"
  displayName: Daily build
  branches:
    include:
    - master

trigger:
- master

stages:
  - stage: boot
    displayName: "Bootstrap"
    jobs:
      - template: azure/os-linux.yml
        steps:
        - script: azure/buildx.sh
          displayName: "Bootstrap"
          env: {OWAZURE_STAGE_NAME: boot, OWOBJDIR: $(owobjdir), OWTOOLS: GCC, OWDEBUG: $(owdebug)}
        - template: azure/artifsav.yml
      - template: azure/os-win.yml
        steps:
        - script: azure/buildx.cmd
          displayName: "Bootstrap"
          env: {OWAZURE_STAGE_NAME: boot, OWOBJDIR: $(owobjdir), OWTOOLS: VISUALC, OWDEBUG: $(owdebug)}
        - template: azure/artifsav.yml
      - template: azure/os-osx.yml
        steps:
        - script: azure/buildx.sh
          displayName: "Bootstrap"
          env: {OWAZURE_STAGE_NAME: boot, OWOBJDIR: $(owobjdir), OWTOOLS: CLANG, OWDEBUG: $(owdebug)}
        - template: azure/artifsav.yml
  - stage: build
    displayName: "Build"
    jobs:
      - template: azure/os-linux.yml
        steps:
        - template: azure/artiflod.yml
        - script: sudo apt-get install -y dosbox
          displayName: "Install DOSBOX"
        - script: azure/buildx.sh
          displayName: "Build"
          env: {OWAZURE_STAGE_NAME: build, OWOBJDIR: $(owobjdir), OWTOOLS: GCC, OWDEBUG: $(owdebug)}
        - template: azure/relsave.yml
      - template: azure/os-win.yml
        timeoutInMinutes: 120
        steps:
        - template: azure/artiflod.yml
        - script: azure/buildx.cmd
          displayName: "Build"
          env: {OWAZURE_STAGE_NAME: build, OWOBJDIR: $(owobjdir), OWTOOLS: VISUALC, OWDEBUG: $(owdebug)}
        - template: azure/relsave.yml
      - template: azure/os-osx.yml
        steps:
        - template: azure/artiflod.yml
        - script: brew install dosbox
          displayName: "Install DOSBOX"
        - script: azure/buildx.sh
          displayName: "Build"
          env: {OWAZURE_STAGE_NAME: build, OWOBJDIR: $(owobjdir), OWTOOLS: CLANG, OWDEBUG: $(owdebug)}
  - stage: tests
    displayName: "Tests"
    jobs:
      - template: azure/os-linux.yml
        steps:
        - template: azure/artiflod.yml
      - template: azure/os-win.yml
        steps:
        - template: azure/artiflod.yml
  - stage: docs
    displayName: "Documentation Build"
    jobs:
      - template: azure/os-win.yml
        timeoutInMinutes: 180
        steps:
        - template: azure/artiflod.yml
        - script: azure/buildx.cmd
          displayName: "Documentation Build"
          env: {OWAZURE_STAGE_NAME: docs, OWOBJDIR: $(owobjdir), OWTOOLS: VISUALC, OWDEBUG: $(owdebug)}
        - template: azure/relload.yml
          parameters: 
            relVersion: binlnx
        - template: azure/relload.yml
          parameters: 
            relVersion: binnt
        # complete OW release artifact
        - template: azure/relsave.yml
          parameters: 
            relVersion: relall
  - stage: instal
    displayName: "Build Installers"
    jobs:
      - template: azure/os-linux.yml
        steps:
        - template: azure/artiflod.yml
        - template: azure/install.yml
        - template: azure/relload.yml
          parameters:
            relVersion: relall
        - script: azure/buildx.sh
          displayName: "Build Installers"
          env: {OWAZURE_STAGE_NAME: inst, OWOBJDIR: $(owobjdir), OWTOOLS: VISUALC, OWDEBUG: $(owdebug)}
        - template: azure/distsave.yml
      - template: azure/os-win.yml
        steps:
        - template: azure/artiflod.yml
        - template: azure/install.yml
        - template: azure/relload.yml
          parameters: 
            relVersion: relall
        - script: azure/buildx.cmd
          displayName: "Build Installers"
          env: {OWAZURE_STAGE_NAME: inst, OWOBJDIR: $(owobjdir), OWTOOLS: VISUALC, OWDEBUG: $(owdebug)}
        - template: azure/distsave.yml
  - stage: release
    displayName: "Make Release on GitHub"
    jobs:
      - template: azure/os-linux.yml
        steps:
        - template: azure/artiflod.yml
        - template: azure/distload.yml
          parameters: 
            relVersion: binlnx
        - template: azure/distload.yml
          parameters: 
            relVersion: binnt
        - template: azure/distsave.yml
          parameters: 
            relVersion: distall
#        - task: GitHubRelease@0
#          inputs:
#            gitHubConnection: 
#            repositoryName: '$(Build.Repository.Name)' 
#            action: 'create' # Options: create, edit, delete
#            target: 'Current-build' # Required when action == Create || Action == Edit
#            tagSource: 'auto' # Required when action == Create# Options: auto, manual
#            #tagPattern: # Optional
#            #tag: # Required when action == Edit || Action == Delete || TagSource == Manual
#            #title: # Optional
#            #releaseNotesSource: 'file' # Optional. Options: file, input
#            #releaseNotesFile: # Optional
#            #releaseNotes: # Optional
#            assets: 'distrib/ow/bin/*' # Optional
#            assetUploadMode: 'replace' # Optional. Options: delete, replace
#            isDraft: false # Optional
#            isPreRelease: true # Optional
#            #addChangeLog: true # Optional
#            #compareWith: 'lastFullRelease' # Required when addChangeLog == True. Options: lastFullRelease, lastRelease, lastReleaseByTag
#            #releaseTag: # Required when compareWith == LastReleaseByTag
